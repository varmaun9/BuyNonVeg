package com.meat.domain;

// Generated Jan 12, 2016 3:37:37 PM by Hibernate Tools 4.0.0

import java.math.BigDecimal;
import java.util.Date;

import javax.persistence.*;

/**
 * PreOrderCartItems generated by hbm2java
 */
@Entity
@Table(name = "pre_order_cart_items", catalog = "meat_app")
public class PreOrderCartItems extends AbstractDomain implements java.io.Serializable {

    private Users users;
    private SellerItem sellerItem;
    private Timings timings;
    private String quantity;
    private BigDecimal price;
    private Float units;
    private Date deliveryDate;
    private Integer countFlag;
    private Offer offer;
    private String deliveryTime;
    private String status;
    private String preOrderCartItemsCode;
    private long preOrderCartItemsCount;
    private Date createdDate;
    private String statusFlag;
    private String timingName;
    private Date modifiedDate;
    private BigDecimal cartPrice;
    private Float itemTax;
    private String cutType;
    private Float itemDiscount;
    private String specialPieceName;
    private String specialPieceCount;

    public PreOrderCartItems() {
    }

    public PreOrderCartItems(final String id, final SellerItem sellerItem, final String quantity, final BigDecimal price, final Float units,
            final String status, final String preOrderCartItemsCode, final long preOrderCartItemsCount, /*final String availableTime, */
            final String timingName, final String deliveryTime, final String specialPieceName, final String specialPieceCount,
            final Integer countFlag, final Offer offer, final Date createdDate, final BigDecimal cartPrice, final Float itemDiscount,
            final Float itemTax) {
        this.id = id;
        this.sellerItem = sellerItem;
        this.quantity = quantity;
        this.price = price;
        this.units = units;
        this.status = status;
        this.preOrderCartItemsCode = preOrderCartItemsCode;
        this.preOrderCartItemsCount = preOrderCartItemsCount;
        this.offer = offer;
        this.timingName = timingName;
        this.deliveryTime = deliveryTime;
        this.createdDate = createdDate;
        this.countFlag = countFlag;
        this.cartPrice = cartPrice;
        this.itemDiscount = itemDiscount;
        this.specialPieceCount = specialPieceCount;
        this.specialPieceName = specialPieceName;
        this.itemTax = itemTax;

    }

    public PreOrderCartItems(final String id, final Users users, final SellerItem sellerItem, final Timings timings, final String quantity,
            final BigDecimal price, final Float units, final Date deliveryDate, final String status, final String preOrderCartItemsCode,
            final long preOrderCartItemsCount, final Date createdDate, final String statusFlag, final Date modifiedDate,
            final BigDecimal cartPrice, final String cutType, final Integer countFlag, final String availableTime, final Offer offer,
            final String deliveryTime, final String timingName) {
        this.id = id;
        this.users = users;
        this.sellerItem = sellerItem;
        this.timings = timings;
        this.quantity = quantity;
        this.offer = offer;
        this.price = price;
        this.units = units;
        this.cutType = cutType;
        this.timingName = timingName;
        this.deliveryDate = deliveryDate;
        this.countFlag = countFlag;
        this.status = status;
        this.preOrderCartItemsCode = preOrderCartItemsCode;
        this.preOrderCartItemsCount = preOrderCartItemsCount;
        this.deliveryTime = deliveryTime;
        this.createdDate = createdDate;
        this.statusFlag = statusFlag;
        this.modifiedDate = modifiedDate;
        this.cartPrice = cartPrice;
    }

    @Column(name = "cart_price", nullable = false, precision = 7)
    public BigDecimal getCartPrice() {
        return cartPrice;
    }

    /**
     * @return the countFlag
     */
    @Column(name = "count_flag")
    public Integer getCountFlag() {
        return countFlag;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "created_date", nullable = false, length = 19)
    public Date getCreatedDate() {
        return createdDate;
    }

    /**
     * @return the cutType
     */
    @Column(name = "cut_type")
    public String getCutType() {
        return cutType;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "delivery_date", length = 19)
    public Date getDeliveryDate() {
        return deliveryDate;
    }

    @Column(name = "delivery_time")
    public String getDeliveryTime() {
        return deliveryTime;
    }

    /**
     * @return the itemDiscount
     */
    @Column(name = "item_discount")
    public Float getItemDiscount() {
        return itemDiscount;
    }

    /**
     * @return the itemTax
     */
    @Column(name = "item_tax")
    public Float getItemTax() {
        return itemTax;
    }

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name = "modified_date", length = 19)
    public Date getModifiedDate() {
        return modifiedDate;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "offer_id", nullable = false)
    public Offer getOffer() {
        return offer;
    }

    @Column(name = "pre_order_cart_items_code", nullable = false, length = 45)
    public String getPreOrderCartItemsCode() {
        return preOrderCartItemsCode;

    }

    @Column(name = "pre_order_cart_items_count", nullable = false, length = 100)
    public long getPreOrderCartItemsCount() {
        return preOrderCartItemsCount;
    }

    @Column(name = "price", nullable = false, precision = 7)
    public BigDecimal getPrice() {
        return price;
    }

    @Column(name = "quantity", nullable = false, length = 45)
    public String getQuantity() {
        return quantity;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "seller_item_id", nullable = false)
    public SellerItem getSellerItem() {
        return sellerItem;
    }

    /**
     * @return the specialPieceCount
     */
    @Column(name = "special_piece_count")
    public String getSpecialPieceCount() {
        return specialPieceCount;
    }

    /**
     * @return the specialPieceName
     */
    @Column(name = "special_piece_name")
    public String getSpecialPieceName() {
        return specialPieceName;
    }

    @Column(name = "status", nullable = false, length = 45)
    public String getStatus() {
        return status;
    }

    @Column(name = "status_flag", length = 45)
    public String getStatusFlag() {
        return statusFlag;
    }

    @Column(name = "timing_name")
    public String getTimingName() {
        return timingName;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "timings_id")
    public Timings getTimings() {
        return timings;
    }

    /*  public void setAvailableTime(final String availableTime) {
          this.availableTime = availableTime;
      }*/

    @Column(name = "units", nullable = false)
    public Float getUnits() {
        return units;
    }

    @ManyToOne(fetch = FetchType.LAZY)
    @JoinColumn(name = "users_id")
    public Users getUsers() {
        return users;
    }

    public void setCartPrice(final BigDecimal cartPrice) {
        this.cartPrice = cartPrice;
    }

    /**
     * @param countFlag
     *            the countFlag to set
     */
    public void setCountFlag(final Integer countFlag) {
        this.countFlag = countFlag;
    }

    public void setCreatedDate(final Date createdDate) {
        this.createdDate = createdDate;
    }

    /**
     * @param cutType
     *            the cutType to set
     */
    public void setCutType(final String cutType) {
        this.cutType = cutType;
    }

    public void setDeliveryDate(final Date deliveryDate) {
        this.deliveryDate = deliveryDate;
    }

    public void setDeliveryTime(final String deliveryTime) {
        this.deliveryTime = deliveryTime;
    }

    /**
     * @param itemDiscount
     *            the itemDiscount to set
     */
    public void setItemDiscount(final Float itemDiscount) {
        this.itemDiscount = itemDiscount;
    }

    /**
     * @param itemTax
     *            the itemTax to set
     */
    public void setItemTax(final Float itemTax) {
        this.itemTax = itemTax;
    }

    public void setModifiedDate(final Date modifiedDate) {
        this.modifiedDate = modifiedDate;
    }

    public void setOffer(final Offer offer) {
        this.offer = offer;
    }

    public void setPreOrderCartItemsCode(final String preOrderCartItemsCode) {
        this.preOrderCartItemsCode = preOrderCartItemsCode;
    }

    public void setPreOrderCartItemsCount(final long preOrderCartItemsCount) {
        this.preOrderCartItemsCount = preOrderCartItemsCount;
    }

    public void setPrice(final BigDecimal price) {
        this.price = price;
    }

    public void setQuantity(final String quantity) {
        this.quantity = quantity;
    }

    public void setSellerItem(final SellerItem sellerItem) {
        this.sellerItem = sellerItem;
    }

    /**
     * @param specialPieceCount
     *            the specialPieceCount to set
     */
    public void setSpecialPieceCount(final String specialPieceCount) {
        this.specialPieceCount = specialPieceCount;
    }

    /**
     * @param specialPieceName
     *            the specialPieceName to set
     */
    public void setSpecialPieceName(final String specialPieceName) {
        this.specialPieceName = specialPieceName;
    }

    public void setStatus(final String status) {
        this.status = status;
    }

    public void setStatusFlag(final String statusFlag) {
        this.statusFlag = statusFlag;
    }

    public void setTimingName(final String timingName) {
        this.timingName = timingName;
    }

    public void setTimings(final Timings timings) {
        this.timings = timings;
    }

    public void setUnits(final Float units) {
        this.units = units;
    }

    public void setUsers(final Users users) {
        this.users = users;

    }
}
